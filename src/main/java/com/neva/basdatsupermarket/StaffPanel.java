package com.neva.basdatsupermarket;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.Vector;

public class StaffPanel extends javax.swing.JFrame {
private JComboBox<String> comboBoxTabel;
    private JButton btnSearch;
    private JTextField txtSearch;
    private JTable tableData;
    private DefaultTableModel tableModel;

    /**
     * Creates new form ReadData
     */
    public StaffPanel() {
        initComponents();
        
          // Tambahkan nama tabel yang valid dari database
    ComboBoxDataTable.setModel(new DefaultComboBoxModel<>(new String[] {
        "Kategori", "Supplier", "Staf", "Produk", "Mutasi_Stok"
    }));

    // ComboBox event
    ComboBoxDataTable.addActionListener(e -> {
        String selectedTable = ComboBoxDataTable.getSelectedItem().toString();
        loadData(selectedTable, null);
    });

    // Tombol search event
    BtnSearch.addActionListener(e -> {
        String tableName = ComboBoxDataTable.getSelectedItem().toString();
        String keyword = SearchField.getText().trim();
        loadData(tableName, keyword);
    });

    // Load awal
    String defaultTable = ComboBoxDataTable.getSelectedItem().toString();
    loadData(defaultTable, null);
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataTable = new javax.swing.JTable();
        ComboBoxDataTable = new javax.swing.JComboBox<>();
        BtnSearch = new javax.swing.JButton();
        LabelTitle = new javax.swing.JLabel();
        SearchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1360, 768));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(33, 72, 192));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DataTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(DataTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 1060, 470));

        ComboBoxDataTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboBoxDataTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxDataTableActionPerformed(evt);
            }
        });
        jPanel1.add(ComboBoxDataTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 110, 200, -1));

        BtnSearch.setBackground(new java.awt.Color(51, 204, 0));
        BtnSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BtnSearch.setForeground(new java.awt.Color(255, 255, 255));
        BtnSearch.setText("SEARCH");
        BtnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 160, 120, 50));

        LabelTitle.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        LabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        LabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTitle.setText("Data Inventaris ");
        LabelTitle.setToolTipText("");
        jPanel1.add(LabelTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 331, 88));

        SearchField.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jPanel1.add(SearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 867, 51));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Search Bar");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 100, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Table Chooser");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(805, 90, 100, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBoxDataTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxDataTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBoxDataTableActionPerformed
   // Event: Tampilkan data saat memilih tabel
       
    private Connection connectDb() throws SQLException {
    String url = "jdbc:sqlserver://localhost\\Neva29:1433;databaseName=db_supermarket;encrypt=true;trustServerCertificate=true";
    String user = "neparim"; // sesuaikan
    String password = "123"; // sesuaikan
    return DriverManager.getConnection(url, user, password);
}

    private void loadData(String tableName, String keyword) {
    String sql;
    // Cek jika tabel yang dipilih adalah 'Produk'
    if (tableName.equalsIgnoreCase("Produk")) {
        sql = "SELECT p.ID_Produk, p.Nama_Produk, k.Nama_Kategori, s.Nama_Supplier, p.Harga, p.Stok_Aktual " +
              "FROM Produk p " +
              "JOIN Kategori k ON p.ID_Kategori = k.ID_Kategori " +
              "JOIN Supplier s ON p.ID_Supplier = s.ID_Supplier";
    
    // BARU: Cek jika tabel yang dipilih adalah 'Mutasi_Stok'
    } else if (tableName.equalsIgnoreCase("Mutasi_Stok")) {
        sql = "SELECT ms.ID_Mutasi, p.Nama_Produk, s.Nama_Staf, ms.Tanggal, ms.Tipe_Mutasi, ms.Jumlah " +
              "FROM Mutasi_Stok ms " +
              "JOIN Produk p ON ms.ID_Produk = p.ID_Produk " +
              "JOIN Staf s ON ms.ID_Staf = s.ID_Staf";
              
    } else {
        // Untuk tabel lainnya, gunakan query standar
        sql = "SELECT * FROM " + tableName;
    }

    // Logika untuk fungsionalitas pencarian (search)
    if (keyword != null && !keyword.isEmpty()) {
        if (tableName.equalsIgnoreCase("Produk")) {
            sql += " WHERE p.ID_Produk LIKE '%" + keyword + "%' OR " +
                   "p.Nama_Produk LIKE '%" + keyword + "%' OR " +
                   "k.Nama_Kategori LIKE '%" + keyword + "%' OR " +
                   "s.Nama_Supplier LIKE '%" + keyword + "%' OR " +
                   "p.Harga LIKE '%" + keyword + "%' OR " +
                   "p.Stok_Aktual LIKE '%" + keyword + "%'";
                   
        // BARU: Logika pencarian untuk tabel Mutasi_Stok
        } else if (tableName.equalsIgnoreCase("Mutasi_Stok")) {
            sql += " WHERE p.Nama_Produk LIKE '%" + keyword + "%' OR " +
                   "s.Nama_Staf LIKE '%" + keyword + "%' OR " +
                   "ms.Tanggal LIKE '%" + keyword + "%' OR " +
                   "ms.Tipe_Mutasi LIKE '%" + keyword + "%' OR " +
                   "ms.Jumlah LIKE '%" + keyword + "%'";

        } else {
            // Logika pencarian generik untuk tabel lain
            try (Connection conn = connectDb();
                 Statement stmt = conn.createStatement()) {
                 ResultSet rsCols = stmt.executeQuery("SELECT TOP 1 * FROM " + tableName);
                 ResultSetMetaData meta = rsCols.getMetaData();
                 int colCount = meta.getColumnCount();
                 StringBuilder where = new StringBuilder(" WHERE ");
                 for (int i = 1; i <= colCount; i++) {
                     where.append(meta.getColumnName(i)).append(" LIKE '%").append(keyword).append("%'");
                     if (i < colCount) where.append(" OR ");
                 }
                 sql += where.toString();
            } catch (SQLException e) {
                 JOptionPane.showMessageDialog(this, "Error membangun query pencarian: " + e.getMessage());
            }
        }
    }

    try (Connection conn = connectDb();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        ResultSetMetaData meta = rs.getMetaData();
        int columnCount = meta.getColumnCount();

        Vector<String> columnNames = new Vector<>();
        for (int i = 1; i <= columnCount; i++) {
            String columnName = meta.getColumnName(i);
            // Mengganti nama kolom untuk tampilan yang lebih baik
            if (columnName.equals("Nama_Kategori")) {
                columnNames.add("Kategori");
            } else if (columnName.equals("Nama_Supplier")) {
                columnNames.add("Supplier");
            } else if (columnName.equals("Nama_Produk")) {
                columnNames.add("Produk");
            } else if (columnName.equals("Nama_Staf")) {
                columnNames.add("Staf");
            } else {
                columnNames.add(columnName);
            }
        }

        Vector<Vector<Object>> data = new Vector<>();
        while (rs.next()) {
            Vector<Object> row = new Vector<>();
            for (int i = 1; i <= columnCount; i++) {
                // Khusus untuk kolom Tanggal, format jika perlu
                if (meta.getColumnName(i).equalsIgnoreCase("Tanggal") && rs.getObject(i) != null) {
                    row.add(rs.getDate(i).toString());
                } else {
                    row.add(rs.getObject(i));
                }
            }
            data.add(row);
        }

        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        DataTable.setModel(model);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal membaca data: " + e.getMessage());
        e.printStackTrace();
    }
}
    /**
     * @param args the command line arguments
     */
  public static void main(String[] args) {
    try {
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(null, "Driver JDBC SQL Server tidak ditemukan.");
        return;
    }

    java.awt.EventQueue.invokeLater(() -> {
        new StaffPanel().setVisible(true);
    });
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnSearch;
    private javax.swing.JComboBox<String> ComboBoxDataTable;
    private javax.swing.JTable DataTable;
    private javax.swing.JLabel LabelTitle;
    private javax.swing.JTextField SearchField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

